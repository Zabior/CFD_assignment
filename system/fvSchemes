/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

fluxScheme      Kurganov;

ddtSchemes
{
    default         steadyState;  // second-order
}

gradSchemes
{
    // default      leastSquares;
   default         cellMDLimited Gauss linear 1.0; // second order
}

divSchemes
{
    default         none;
    //div(tauMC)      Gauss linear;  //second order
    // div(phi,U)      Gauss vanLeerV;  //second order
    
    div(phi,U)      Gauss linearUpwind grad(U);

    //div(phi,k)   Gauss linearUpwind grad(omega);
    //div(phi,omega)     Gauss linearUpwind grad(omega);
 
    //div(phi,U)      Gauss limitedLinearV 0.3;

    //div(phi,k)     Gauss limitedLinear 1;  //first-second order
    div(phi,epsilon)     Gauss limitedLinear 1;  //first-second order
 
  div(phiv,p)      Gauss limitedLinear 1; 
  div(phid,p)      Gauss vanLeer; //second order

  div(phi,K)      bounded Gauss vanLeer;
  div(phi,e)      bounded Gauss vanLeer;
  div(phi,Ekp)    bounded Gauss vanLeer;
  div(phi,nuTilda) bounded Gauss vanLeer;
  
//div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
  div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    div((rho*R)) Gauss linear;
  div(phi,R) Gauss linear;
  div(phi,Ekp) Gauss linear;
  div(((rho*(thermo:mu|rho))*dev2(T(grad(U))))) Gauss linear;
  div(R) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear limited 1.0;
}

interpolationSchemes
{
    default         midPoint;
    reconstruct(rho) vanLeer;
    reconstruct(U)  vanLeerV;
    reconstruct(T)  vanLeer;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method          meshWave;
}

// ************************************************************************* //
